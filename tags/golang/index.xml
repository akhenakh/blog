<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Fabrice Aneche</title><link>https://blog.nobugware.com/tags/golang/</link><description>Recent content in golang on Fabrice Aneche</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Jun 2022 04:00:00 +0000</lastBuildDate><atom:link href="https://blog.nobugware.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Surprising result while transpiling C to Go</title><link>https://blog.nobugware.com/post/2022/surprising-result-while-transpiling-go/</link><pubDate>Mon, 20 Jun 2022 04:00:00 +0000</pubDate><guid>https://blog.nobugware.com/post/2022/surprising-result-while-transpiling-go/</guid><description>H3 is a geospacial indexing library created by Uber, if you are familiar with this blog it&amp;rsquo;s similar to S2.
Uber is providing h3 for Go unfortunately it&amp;rsquo;s a CGO version, a C to Go binding as you may know CGO is not Go.
Having a native Go library is easier to deal with but would mean a full rewrite.
Transpiling You may have heard about a recent effort to transpile C to Go using ccgo and the associated libc.</description></item><item><title>Using Github Actions with Golangci-linter</title><link>https://blog.nobugware.com/post/2019/using-github-actions-with-golangci-linter/</link><pubDate>Wed, 11 Sep 2019 00:00:00 -0400</pubDate><guid>https://blog.nobugware.com/post/2019/using-github-actions-with-golangci-linter/</guid><description>Github delivered a beta Github Actions, it&amp;rsquo;s a worflow that can run almost anything related to your code, like a CI/CD.
Here is a workflow for Go 1.13 module projects and golangci-lint.
name: golangci-lint on: [push] jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Set up Go 1.13 uses: actions/setup-go@v1 with: go-version: 1.13 id: go - name: Check out code into the Go module directory uses: actions/checkout@v1 - name: Install golangci-lint run: curl -sfL https://raw.</description></item><item><title>gRPC wrong types context and Go 1.7</title><link>https://blog.nobugware.com/post/2016/grpc_context_go_1.7/</link><pubDate>Wed, 28 Sep 2016 13:15:53 -0400</pubDate><guid>https://blog.nobugware.com/post/2016/grpc_context_go_1.7/</guid><description>If you are following Go development you probably know that:
Go 1.7 moves the golang.org/x/net/context package into the standard library as context, Yeah !
Unfortunately it won&amp;rsquo;t work for everything, I&amp;rsquo;ve spent some time understanding this one.
For example if you are using gRPC you can hit this problem, here is an interface generated by gRPC:
type APRSServer interface { GetPastMessages(context.Context, *Point) (*ARPSMessages, error) } But when compiling:
/main.go:153: cannot use &amp;amp;s (type *Server) as type protorpc.</description></item><item><title>Using Go mobile on iOS for real</title><link>https://blog.nobugware.com/post/2016/go_mobile_ios_real_usage/</link><pubDate>Thu, 22 Sep 2016 15:39:32 -0400</pubDate><guid>https://blog.nobugware.com/post/2016/go_mobile_ios_real_usage/</guid><description>Go Mobile can generate native framework for iOS and Android using Go code, I was curious what could be achieved with it.
Most tutorials are Hello world and I wanted to test it with real code.
You can use it to generate a full app only using Go code, but I&amp;rsquo;m only interested by the bindings part (SDK applications), using a native ObjC/Swift app calling Go code.
I&amp;rsquo;m using some existing Go code regionagogo, (a geofence database), moderately complex since it uses BoltDB and Google S2 library.</description></item><item><title>A fast geo database with Google S2 take #2</title><link>https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/</link><pubDate>Tue, 26 Jan 2016 14:01:52 -0500</pubDate><guid>https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/</guid><description>Six months ago, I wrote on this blog about Geohashes and LevelDB with Go, to create a fast geo database.
This post is very similar as it works the same way but replacing GeoHashes with Google S2 library for better performances.
There is an S2 Golang implementation maintened by Google not as complete as the C++ one but close.
For the storage this post will stay agnostic to avoid any troll, but it applies to any Key Value storages: LevelDB/RocksDB, LMDB, Redis&amp;hellip;</description></item><item><title>Freebsd on Raspberry Pi 2 and Golang</title><link>https://blog.nobugware.com/post/2016/freebsd_raspberry_pi2/</link><pubDate>Sun, 10 Jan 2016 11:32:19 -0500</pubDate><guid>https://blog.nobugware.com/post/2016/freebsd_raspberry_pi2/</guid><description>FreeBSD is now fully supported on the Raspberry Pi2, makes it a fun small computer to experiment with BSD.
If you have a Raspberry Pi 1, you can simply install 10.2-RELEASE image.
For Raspberry Pi 2, you need 11.0-CURRENT which is the development branch, images can be found here.
dd the image as usual to a SD card, it will be auto resized at first boot. (See growfs_enable=&amp;quot;YES&amp;quot;) in rc.conf.</description></item><item><title>Access OS metrics from Golang</title><link>https://blog.nobugware.com/post/2015/metrics_golang_operating_system/</link><pubDate>Sun, 02 Aug 2015 13:10:38 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/metrics_golang_operating_system/</guid><description>I&amp;rsquo;ve recently published StatGo, it gives you access to your operating system metrics like free memory, used disk spaces &amp;hellip;
It&amp;rsquo;s a binding to the C library libstatgrab, a proven stable piece of code that works on many different systems, FreeBSD, Linux, OSX &amp;hellip;
It&amp;rsquo;s very simple to use:
s := NewStat() c := s.CPUStats() fmt.Prinln(c.Idle) 98.2 Feel free to contribute, it may need some improvement but it&amp;rsquo;s working I&amp;rsquo;m using it in a small metrics web server to monitor small network of servers.</description></item><item><title>Run a full Wikipedia copy from any computers</title><link>https://blog.nobugware.com/post/2015/01/02/run-a-full-wikipedia-copy-from-any-computers/</link><pubDate>Fri, 02 Jan 2015 17:50:45 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/01/02/run-a-full-wikipedia-copy-from-any-computers/</guid><description>Today I&amp;rsquo;m releasing Gozim a side project written in Go.
It&amp;rsquo;s a set of tools to serve ZIM files, (compressed copy of Wiki articles), use it to run your full copy of Wikipedia off the grid.
It runs great on a small computer as the Raspberry Pi or your own laptop.
It could be a solution to give access to knowledge in countries without stable internet connections.</description></item><item><title>Enhance your Go</title><link>https://blog.nobugware.com/post/2013/04/24/enhance-your-go/</link><pubDate>Wed, 24 Apr 2013 18:51:20 -0400</pubDate><guid>https://blog.nobugware.com/post/2013/04/24/enhance-your-go/</guid><description>After my [Enhance your Python](http://blog.nobugware.com/post/2011/08/16 /enhance-your-python) post, which is my Python bible reference, I wanted the same for Golang:
Effective Go, write effective Go Go by examples, simple but useful examples in Go The Go memory model, Goroutines lock or not ? Things I Wish Someone Had Told Me About Go Go Object Oriented Design The sources for the standard packages are gold mine for best practices Race detector documentation, (&amp;gt;= 1.</description></item></channel></rss>