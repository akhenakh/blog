<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Fabrice Aneche</title>
    <link>https://blog.nobugware.com/tags/devops/</link>
    <description>Recent content in devops on Fabrice Aneche</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2019 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://blog.nobugware.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Traefik 2.0 with Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/advanced-traefik-2-0-with-kubernetes/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/advanced-traefik-2-0-with-kubernetes/</guid>
      <description>Following my earlier post about Traefik 2 and Kubernetes, here are some advanced configuration examples and a full yaml example at the end of this post:
Protecting a route with a password Create an htpasswd file named users for a user admin
 htpasswd -c users admin  Use kubectl to create the secret (easier for multi lines file).
kubectl create secret generic admin-authsecret --from-file=users  Create a middleware for authentication:</description>
    </item>
    
    <item>
      <title>Self Hosted World Maps</title>
      <link>https://blog.nobugware.com/post/2019/self_hosted_world_maps/</link>
      <pubDate>Fri, 04 Oct 2019 13:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/self_hosted_world_maps/</guid>
      <description>Maps are fun, self hosted maps are awesome !
Serving world maps was reserved to big companies like Google, thanks to the OpenStreetMap project, we now have access to an open world of data.
Generating Tiles MapBox (and others) worked hard to create a vector format bundled in a SQLite file: mbtiles format.
It&amp;rsquo;s vector based as opposed to older raster maps containing 256x256 PNG images.
The Openmaptiles folks did a great job automating the map generation.</description>
    </item>
    
    <item>
      <title>Google Kubernetes Engine &amp; GCP</title>
      <link>https://blog.nobugware.com/post/2019/google-kubernetes-engine-gcp/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/google-kubernetes-engine-gcp/</guid>
      <description>I&amp;rsquo;ve been using Google Compute Platform (GCP) &amp;amp; Google Kubernetes Engine (GKE) for years.
And I love it, I hated AWS since the first release to these days, naming is cumbersome, UX is terrible&amp;hellip;
Here are a quick survey of the tools and how I&amp;rsquo;ve used them for small to medium projects:
Cloud Build Cloud Build is super easy, it&amp;rsquo;s a scriptable CI/CD, very similar to Github Actions, there is a one hour free tier per day, the default machine is very slow, it can be tuned in the cloudbuild.</description>
    </item>
    
    <item>
      <title>Traefik 2.0 with Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/traefik-2-0-with-kubernetes/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/traefik-2-0-with-kubernetes/</guid>
      <description>Traefik 2.0 is here !
Traefik is a reverse proxy load balancer (and more), it can learn the routes to respond to by discovering them in multiple providers, Docker, Kubernetes &amp;hellip;
Traefik v1.x is very stable, v2.x is fresh new tech, with breaking changes and unfinished documentation, so test it first.
From Traefik&amp;rsquo;s documentation:
 Providers discover the services that live on your infrastructure (their IP, health, &amp;hellip;) Entrypoints listen for incoming traffic (ports, &amp;hellip;) Routers analyze the requests (host, path, headers, SSL, &amp;hellip;) Services forward the request to your services (load balancing, &amp;hellip;) Middlewares may update the request or make decisions based on the request (authentication, rate limiting, headers, &amp;hellip;)  Kubernetes In Traefik v1, Kubernetes ingress were used to discover the routes:</description>
    </item>
    
    <item>
      <title>Access Kubernetes Web Interfaces from the Outside</title>
      <link>https://blog.nobugware.com/post/2019/access-web-interface/</link>
      <pubDate>Mon, 09 Sep 2019 13:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/access-web-interface/</guid>
      <description>Here is a simple yet useful trick to access web interface within your cluster.
As stated in the Kubernetes documentation you can use kubectl proxy.
I&amp;rsquo;ve seen a lot of people using the proxy to access the dashboard but you can use it to access any web interfaces, without the need to create an ingress and protect it, especially useful in dev environment.
http://kubernetes_master_address/api/v1/namespaces/namespace_name/services/service_name[:port_name]/proxy  For example here is how to access the Traefik dashboard described as follow:</description>
    </item>
    
    <item>
      <title>Deploying a website with Caddy, Git and Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/deploying-a-website-with-caddy-git-and-kubernetes/</link>
      <pubDate>Sat, 27 Apr 2019 02:01:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/deploying-a-website-with-caddy-git-and-kubernetes/</guid>
      <description>Caddy is the swiss army of the web server, and with the recent commercial license changes, it&amp;rsquo;s time to give it some love back.
I have several static websites, some generated with Hugo, some are plain HTML.
I wanted a small container, to run it inside a Kubernetes cluster, capable of pulling some git repos and serve them.
Caddy-git Caddy is already capable of that with the help of caddy-git unfortunately it is only working with ssh keys.</description>
    </item>
    
    <item>
      <title>Traefik gRPC Load Balancing and Traces Propagation</title>
      <link>https://blog.nobugware.com/post/2019/traefik_load_balancing_grpc_services_trace_propagation/</link>
      <pubDate>Mon, 04 Mar 2019 00:32:43 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/traefik_load_balancing_grpc_services_trace_propagation/</guid>
      <description>Following my recent blog post on setting up a dev environment in Kubernetes, here are some tips to use Traefik as a gRPC load balancer.
Traefik can be used on the edge and route incoming HTTP traffic to your Kubernetes cluster, but it&amp;rsquo;s also supporting gRPC.
  
gRPC Load Balancing with Traefik Here I have a gRPC service I want to expose on the edge.
apiVersion: v1 kind: Service metadata: name: myapp labels: name: &amp;quot;myapp&amp;quot; type: &amp;quot;grpc&amp;quot; spec: ports: - port: 9200 name: &amp;quot;grpc&amp;quot; targetPort: grpc protocol: TCP selector: app: &amp;quot;myapp&amp;quot; clusterIP: None  Note the clusterIP: None, it&amp;rsquo;s a headless service.</description>
    </item>
    
    <item>
      <title>Kubernetes Quick Setup with Prometheus, Grafana &amp; Jaeger</title>
      <link>https://blog.nobugware.com/post/2019/kubernetes_quick_development_setup_minikube_prometheus_grafana/</link>
      <pubDate>Thu, 21 Feb 2019 00:19:57 -0200</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/kubernetes_quick_development_setup_minikube_prometheus_grafana/</guid>
      <description>Introduction When starting on a new project or prototyping on a new idea, I find myself doing the same tasks again and again.
Thanks to Kubernetes it&amp;rsquo;s possible to setup a new env from scratch really fast.
Here is a quick setup (mostly notes) to create a dev environment using Minikube and the workflow I&amp;rsquo;m using with it.
Not knowing in advance where this future project will be hosted, I try to stay platform agnostic.</description>
    </item>
    
  </channel>
</rss>