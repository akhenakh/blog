<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Fabrice Aneche</title><link>https://blog.nobugware.com/categories/golang/</link><description>Recent content in Golang on Fabrice Aneche</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Sep 2016 13:15:53 -0400</lastBuildDate><atom:link href="https://blog.nobugware.com/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC wrong types context and Go 1.7</title><link>https://blog.nobugware.com/post/2016/grpc_context_go_1.7/</link><pubDate>Wed, 28 Sep 2016 13:15:53 -0400</pubDate><guid>https://blog.nobugware.com/post/2016/grpc_context_go_1.7/</guid><description>If you are following Go development you probably know that:
Go 1.7 moves the golang.org/x/net/context package into the standard library as context, Yeah !
Unfortunately it won&amp;rsquo;t work for everything, I&amp;rsquo;ve spent some time understanding this one.
For example if you are using gRPC you can hit this problem, here is an interface generated by gRPC:
type APRSServer interface { GetPastMessages(context.Context, *Point) (*ARPSMessages, error) } But when compiling:
/main.go:153: cannot use &amp;amp;s (type *Server) as type protorpc.</description></item><item><title>Using Go mobile on iOS for real</title><link>https://blog.nobugware.com/post/2016/go_mobile_ios_real_usage/</link><pubDate>Thu, 22 Sep 2016 15:39:32 -0400</pubDate><guid>https://blog.nobugware.com/post/2016/go_mobile_ios_real_usage/</guid><description>Go Mobile can generate native framework for iOS and Android using Go code, I was curious what could be achieved with it.
Most tutorials are Hello world and I wanted to test it with real code.
You can use it to generate a full app only using Go code, but I&amp;rsquo;m only interested by the bindings part (SDK applications), using a native ObjC/Swift app calling Go code.
I&amp;rsquo;m using some existing Go code regionagogo, (a geofence database), moderately complex since it uses BoltDB and Google S2 library.</description></item><item><title>gRPC Envoy Nghttp2 and Load Balancing</title><link>https://blog.nobugware.com/post/2016/grpc_envoy_nghttp2_load_balancing/</link><pubDate>Tue, 20 Sep 2016 17:40:04 -0400</pubDate><guid>https://blog.nobugware.com/post/2016/grpc_envoy_nghttp2_load_balancing/</guid><description>I&amp;rsquo;ve been using gRPC at work and in several personal projects for months and happy with it, but when it comes to load balancing gRPC does not come with batteries included.
For a long time the only document was the Load Balancing draft in the gRPC repo, the clients should implement a Picker interface to know about the servers, so the pooling and controling the load were handled by the clients.</description></item><item><title>Enabling Gometalinter with Jetbrains Editors</title><link>https://blog.nobugware.com/post/2016/gometalinter_jetbrains_idea/</link><pubDate>Sun, 03 Jul 2016 08:15:43 +0200</pubDate><guid>https://blog.nobugware.com/post/2016/gometalinter_jetbrains_idea/</guid><description>I&amp;rsquo;ve been using Jetbrains editor (the free Idea community edition) or Pycharm with the Go plugins and very happy with this setup, the editor is providing some realtime linting but I was missing gometalinter.
First install gometalinter
go get -u github.com/alecthomas/gometalinter gometalinter --install --update To add support inside Jetbrains editors use the External tools feature.
In Preferences &amp;gt; Tools &amp;gt; External Tools, add a configuration.
Set the Program path to your $GOPATH/bin/gometalinter</description></item><item><title>A geo database for polygons, optimization</title><link>https://blog.nobugware.com/post/2016/geo_db_s2_region_polygon_optmization/</link><pubDate>Tue, 08 Mar 2016 11:23:42 -0500</pubDate><guid>https://blog.nobugware.com/post/2016/geo_db_s2_region_polygon_optmization/</guid><description>If you read this blog, you know I&amp;rsquo;ve recently released a project called regionagogo, a geo shape lookup database, described in this blogpost.
It uses the current Go S2 implementation, which is not yet as complete as the C++ implementation, for example the region coverer of a shape does not really compute cell around the shape but around the bounding box instead.
Using the shape of the polygon makes the covered cells more precise and smaller, resulting at the end to less PIP tests which are costly.</description></item><item><title>A geo database for polygons, foundations</title><link>https://blog.nobugware.com/post/2016/geo_db_s2_region_polygon/</link><pubDate>Thu, 18 Feb 2016 17:16:55 -0500</pubDate><guid>https://blog.nobugware.com/post/2016/geo_db_s2_region_polygon/</guid><description>On a previous post, I&amp;rsquo;ve described how to use the S2 geo library to create a fast geo database, but it was to store locations (points) and only to perform range queries, a complete geo database would have regions/polygons queries.
Looking for a solution I had this need: querying for the countries or subregions of hundreds of coordinates per second, without relying on an external service.
One solution, using my previous technique, could have been to store every cities in the world and then perform a proximity query around my point to get the closest cities, but it works only in populated area and it&amp;rsquo;s only an approximation.</description></item><item><title>A fast geo database with Google S2 take #2</title><link>https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/</link><pubDate>Tue, 26 Jan 2016 14:01:52 -0500</pubDate><guid>https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/</guid><description>Six months ago, I wrote on this blog about Geohashes and LevelDB with Go, to create a fast geo database.
This post is very similar as it works the same way but replacing GeoHashes with Google S2 library for better performances.
There is an S2 Golang implementation maintened by Google not as complete as the C++ one but close.
For the storage this post will stay agnostic to avoid any troll, but it applies to any Key Value storages: LevelDB/RocksDB, LMDB, Redis&amp;hellip;</description></item><item><title>A blazing fast geo database with LevelDB, Go and Geohashes</title><link>https://blog.nobugware.com/post/2015/leveldb_geohash_golang/</link><pubDate>Sun, 30 Aug 2015 18:25:02 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/leveldb_geohash_golang/</guid><description>You probably have heard of LevelDB it’s a blazing fast key value store (as a library not a daemon), that uses Snappy compression.
There is plenty of usages for it, the API is very simple at least in Go (I will be using Goleveldb).
The key is a []byte the value is a []byte so you can “get”, “put” &amp;amp; “delete” that’s it.
I needed a low memory low cpu system that could collect millions of geo data and query over them, Geohash has an interesting property you can encode longitude and latitude into a string : f2m616nn this hash represents the lat &amp;amp; long 46.</description></item><item><title>Access OS metrics from Golang</title><link>https://blog.nobugware.com/post/2015/metrics_golang_operating_system/</link><pubDate>Sun, 02 Aug 2015 13:10:38 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/metrics_golang_operating_system/</guid><description>I&amp;rsquo;ve recently published StatGo, it gives you access to your operating system metrics like free memory, used disk spaces &amp;hellip;
It&amp;rsquo;s a binding to the C library libstatgrab, a proven stable piece of code that works on many different systems, FreeBSD, Linux, OSX &amp;hellip;
It&amp;rsquo;s very simple to use:
s := NewStat() c := s.CPUStats() fmt.Prinln(c.Idle) 98.2 Feel free to contribute, it may need some improvement but it&amp;rsquo;s working I&amp;rsquo;m using it in a small metrics web server to monitor small network of servers.</description></item><item><title>A 10 minutes walk into Grafana &amp; Influxdb</title><link>https://blog.nobugware.com/post/2015/04/grafana_influxdb/</link><pubDate>Thu, 02 Apr 2015 12:49:04 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/04/grafana_influxdb/</guid><description>This is a 10 minute tutorial to set up an InfluxDB + Grafana with Go on your Mac, but should work with minor modifcations on your favorite Unix too, it assumes you already have a working Go compiler.
InfluxDB is a database specialized into time series, think store everything associated with a time, makes it perfect for monitoring and graphing values. Grafana is a js frontend capable of reading the data from InfluxDB and graphing it.</description></item><item><title>Run a full Wikipedia copy from any computers</title><link>https://blog.nobugware.com/post/2015/01/02/run-a-full-wikipedia-copy-from-any-computers/</link><pubDate>Fri, 02 Jan 2015 17:50:45 -0400</pubDate><guid>https://blog.nobugware.com/post/2015/01/02/run-a-full-wikipedia-copy-from-any-computers/</guid><description>Today I&amp;rsquo;m releasing Gozim a side project written in Go.
It&amp;rsquo;s a set of tools to serve ZIM files, (compressed copy of Wiki articles), use it to run your full copy of Wikipedia off the grid.
It runs great on a small computer as the Raspberry Pi or your own laptop.
It could be a solution to give access to knowledge in countries without stable internet connections.</description></item><item><title>Enhance your Go</title><link>https://blog.nobugware.com/post/2013/04/24/enhance-your-go/</link><pubDate>Wed, 24 Apr 2013 18:51:20 -0400</pubDate><guid>https://blog.nobugware.com/post/2013/04/24/enhance-your-go/</guid><description>After my [Enhance your Python](http://blog.nobugware.com/post/2011/08/16 /enhance-your-python) post, which is my Python bible reference, I wanted the same for Golang:
Effective Go, write effective Go Go by examples, simple but useful examples in Go The Go memory model, Goroutines lock or not ? Things I Wish Someone Had Told Me About Go Go Object Oriented Design The sources for the standard packages are gold mine for best practices Race detector documentation, (&amp;gt;= 1.</description></item></channel></rss>