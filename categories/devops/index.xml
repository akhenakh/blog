<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Fabrice Aneche</title>
    <link>https://blog.nobugware.com/categories/devops/</link>
    <description>Recent content in Devops on Fabrice Aneche</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Nov 2019 03:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nobugware.com/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nomad an alternative to Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/nomad_an_alternative_to_kubernetes/</link>
      <pubDate>Tue, 12 Nov 2019 03:00:00 +0000</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/nomad_an_alternative_to_kubernetes/</guid>
      <description>If you are familiar with this blog you know I really appreciate Kubernetes: as a former ops I strongly believe Kubernetes is one way to bundle &amp;ldquo;the sum of 20y ops good practices&amp;rdquo;.
But there are others solutions one is Nomad.
It&amp;rsquo;s made by Hashicorp, creators of Vault, Consul, Terraform&amp;hellip;
In general Hashicorp is synonym with quality.
Nomad is a task scheduler, a task could be execute a command, run a Docker container or a QEMU vms&amp;hellip;</description>
    </item>
    
    <item>
      <title>Advanced Traefik 2.0 with Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/advanced-traefik-2-0-with-kubernetes/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/advanced-traefik-2-0-with-kubernetes/</guid>
      <description>Following my earlier post about Traefik 2 and Kubernetes, here are some advanced configuration examples and a full yaml example at the end of this post:
Protecting a route with a password Create an htpasswd file named users for a user admin
 htpasswd -c users admin  Use kubectl to create the secret (easier for multi lines file).
kubectl create secret generic admin-authsecret --from-file=users  Create a middleware for authentication:</description>
    </item>
    
    <item>
      <title>Traefik 2.0 with Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/traefik-2-0-with-kubernetes/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/traefik-2-0-with-kubernetes/</guid>
      <description>Traefik 2.0 is here !
Traefik is a reverse proxy load balancer (and more), it can learn the routes to respond to by discovering them in multiple providers, Docker, Kubernetes &amp;hellip;
Traefik v1.x is very stable, v2.x is fresh new tech, with breaking changes and unfinished documentation, so test it first.
From Traefik&amp;rsquo;s documentation:
 Providers discover the services that live on your infrastructure (their IP, health, &amp;hellip;) Entrypoints listen for incoming traffic (ports, &amp;hellip;) Routers analyze the requests (host, path, headers, SSL, &amp;hellip;) Services forward the request to your services (load balancing, &amp;hellip;) Middlewares may update the request or make decisions based on the request (authentication, rate limiting, headers, &amp;hellip;)  Kubernetes In Traefik v1, Kubernetes ingress were used to discover the routes:</description>
    </item>
    
    <item>
      <title>Bare Metal Kubernetes Quick Installation Arm64 &amp; Arch</title>
      <link>https://blog.nobugware.com/post/2019/bare-metal-kubernetes-quick-installations-on-arch/</link>
      <pubDate>Mon, 09 Sep 2019 00:02:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/bare-metal-kubernetes-quick-installations-on-arch/</guid>
      <description>I&amp;rsquo;m still playing with my 3 nodes arm64 cluster, having some stability issues with k3s, I turned into kubeadm to deploy a bare metal non HA one master two workers Kubernetes cluster.
My host is Arch which is theoretically not supported but still works.
Required tasks sudo pacman -S ethtool ebtables socat cni-plugins  Install aur/kubelet-bin and aur/kubeadm-bin
I needed a private registry to host my images, on master node:</description>
    </item>
    
    <item>
      <title>k3s on arm64</title>
      <link>https://blog.nobugware.com/post/2019/k3s-on-arm64/</link>
      <pubDate>Wed, 19 Jun 2019 06:00:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/k3s-on-arm64/</guid>
      <description>I&amp;rsquo;m evaluating k3s a Lightweight Kubernetes on a 3 nodes arm64 cluster (RK3328 Quad arm64).
At the time of writing the stable release is k3s v0.6.1.
Here are my notes:
 If you haven&amp;rsquo;t installed k3s with the install.sh, you may need to load some modules: br_netfilter and overlay Docker is not needed since k3s is using containerd but it seems I had to start docker to initialized the whole cgroups, at least on Arch Remember to modify all the templates to use an arm64 image</description>
    </item>
    
    <item>
      <title>Deploying a website with Caddy, Git and Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/deploying-a-website-with-caddy-git-and-kubernetes/</link>
      <pubDate>Sat, 27 Apr 2019 02:01:00 -0400</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/deploying-a-website-with-caddy-git-and-kubernetes/</guid>
      <description>Caddy is the swiss army of the web server, and with the recent commercial license changes, it&amp;rsquo;s time to give it some love back.
I have several static websites, some generated with Hugo, some are plain HTML.
I wanted a small container, to run it inside a Kubernetes cluster, capable of pulling some git repos and serve them.
Caddy-git Caddy is already capable of that with the help of caddy-git unfortunately it is only working with ssh keys.</description>
    </item>
    
    <item>
      <title>gRPC Load Balancing inside Kubernetes</title>
      <link>https://blog.nobugware.com/post/2019/kubernetes_mesh_network_load_balancing_grpc_services/</link>
      <pubDate>Mon, 11 Mar 2019 00:32:43 -0500</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/kubernetes_mesh_network_load_balancing_grpc_services/</guid>
      <description>Context I wanted to blog about this for years: how to connect to a Kubernete&amp;rsquo;s loadbalanced service?
How to deal with disconnections/re-connections, maintenance? What about gRPC specifically?
The answer is heavily connected to the network stack used by Kubernetes, but with the &amp;ldquo;Mesh Network&amp;rdquo; revolution, It&amp;rsquo;s not always clear how it works anymore and what the options are. How it works First I recommend you to watch this great yet simple video: Container Networking From Scratch, then the Services clusterIP documentation.</description>
    </item>
    
    <item>
      <title>Traefik gRPC Load Balancing and Traces Propagation</title>
      <link>https://blog.nobugware.com/post/2019/traefik_load_balancing_grpc_services_trace_propagation/</link>
      <pubDate>Mon, 04 Mar 2019 04:32:43 +0000</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/traefik_load_balancing_grpc_services_trace_propagation/</guid>
      <description>Following my recent blog post on setting up a dev environment in Kubernetes, here are some tips to use Traefik as a gRPC load balancer.
Traefik can be used on the edge and route incoming HTTP traffic to your Kubernetes cluster, but it&amp;rsquo;s also supporting gRPC.
  
gRPC Load Balancing with Traefik Here I have a gRPC service I want to expose on the edge.
apiVersion: v1 kind: Service metadata: name: myapp labels: name: &amp;quot;myapp&amp;quot; type: &amp;quot;grpc&amp;quot; spec: ports: - port: 9200 name: &amp;quot;grpc&amp;quot; targetPort: grpc protocol: TCP selector: app: &amp;quot;myapp&amp;quot; clusterIP: None  Note the clusterIP: None, it&amp;rsquo;s a headless service.</description>
    </item>
    
    <item>
      <title>Kubernetes Quick Setup with Prometheus, Grafana &amp; Jaeger</title>
      <link>https://blog.nobugware.com/post/2019/kubernetes_quick_development_setup_minikube_prometheus_grafana/</link>
      <pubDate>Thu, 21 Feb 2019 00:19:57 -0200</pubDate>
      
      <guid>https://blog.nobugware.com/post/2019/kubernetes_quick_development_setup_minikube_prometheus_grafana/</guid>
      <description>Introduction When starting on a new project or prototyping on a new idea, I find myself doing the same tasks again and again.
Thanks to Kubernetes it&amp;rsquo;s possible to setup a new env from scratch really fast.
Here is a quick setup (mostly notes) to create a dev environment using Minikube and the workflow I&amp;rsquo;m using with it.
Not knowing in advance where this future project will be hosted, I try to stay platform agnostic.</description>
    </item>
    
  </channel>
</rss>